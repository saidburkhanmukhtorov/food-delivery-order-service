// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule-food-delivery/order/office.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OfficeService_CreateOffice_FullMethodName = "/order.OfficeService/CreateOffice"
	OfficeService_GetOffice_FullMethodName    = "/order.OfficeService/GetOffice"
	OfficeService_UpdateOffice_FullMethodName = "/order.OfficeService/UpdateOffice"
	OfficeService_PatchOffice_FullMethodName  = "/order.OfficeService/PatchOffice"
	OfficeService_DeleteOffice_FullMethodName = "/order.OfficeService/DeleteOffice"
	OfficeService_GetOffices_FullMethodName   = "/order.OfficeService/GetOffices"
)

// OfficeServiceClient is the client API for OfficeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OfficeService defines the gRPC service for managing offices.
type OfficeServiceClient interface {
	// Create a new office.
	CreateOffice(ctx context.Context, in *CreateOfficeRequest, opts ...grpc.CallOption) (*Office, error)
	// Get an office by its ID.
	GetOffice(ctx context.Context, in *OfficeRequest, opts ...grpc.CallOption) (*Office, error)
	// Update an existing office.
	UpdateOffice(ctx context.Context, in *UpdateOfficeRequest, opts ...grpc.CallOption) (*Office, error)
	// Partially update an existing office.
	PatchOffice(ctx context.Context, in *PatchOfficeRequest, opts ...grpc.CallOption) (*Office, error)
	// Delete an office.
	DeleteOffice(ctx context.Context, in *DeleteOfficeRequest, opts ...grpc.CallOption) (*DeleteOfficeRes, error)
	// Get a list of offices.
	GetOffices(ctx context.Context, in *GetOfficesRequest, opts ...grpc.CallOption) (*GetOfficesResponse, error)
}

type officeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficeServiceClient(cc grpc.ClientConnInterface) OfficeServiceClient {
	return &officeServiceClient{cc}
}

func (c *officeServiceClient) CreateOffice(ctx context.Context, in *CreateOfficeRequest, opts ...grpc.CallOption) (*Office, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Office)
	err := c.cc.Invoke(ctx, OfficeService_CreateOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) GetOffice(ctx context.Context, in *OfficeRequest, opts ...grpc.CallOption) (*Office, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Office)
	err := c.cc.Invoke(ctx, OfficeService_GetOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) UpdateOffice(ctx context.Context, in *UpdateOfficeRequest, opts ...grpc.CallOption) (*Office, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Office)
	err := c.cc.Invoke(ctx, OfficeService_UpdateOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) PatchOffice(ctx context.Context, in *PatchOfficeRequest, opts ...grpc.CallOption) (*Office, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Office)
	err := c.cc.Invoke(ctx, OfficeService_PatchOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) DeleteOffice(ctx context.Context, in *DeleteOfficeRequest, opts ...grpc.CallOption) (*DeleteOfficeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOfficeRes)
	err := c.cc.Invoke(ctx, OfficeService_DeleteOffice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) GetOffices(ctx context.Context, in *GetOfficesRequest, opts ...grpc.CallOption) (*GetOfficesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOfficesResponse)
	err := c.cc.Invoke(ctx, OfficeService_GetOffices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficeServiceServer is the server API for OfficeService service.
// All implementations must embed UnimplementedOfficeServiceServer
// for forward compatibility.
//
// OfficeService defines the gRPC service for managing offices.
type OfficeServiceServer interface {
	// Create a new office.
	CreateOffice(context.Context, *CreateOfficeRequest) (*Office, error)
	// Get an office by its ID.
	GetOffice(context.Context, *OfficeRequest) (*Office, error)
	// Update an existing office.
	UpdateOffice(context.Context, *UpdateOfficeRequest) (*Office, error)
	// Partially update an existing office.
	PatchOffice(context.Context, *PatchOfficeRequest) (*Office, error)
	// Delete an office.
	DeleteOffice(context.Context, *DeleteOfficeRequest) (*DeleteOfficeRes, error)
	// Get a list of offices.
	GetOffices(context.Context, *GetOfficesRequest) (*GetOfficesResponse, error)
	mustEmbedUnimplementedOfficeServiceServer()
}

// UnimplementedOfficeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfficeServiceServer struct{}

func (UnimplementedOfficeServiceServer) CreateOffice(context.Context, *CreateOfficeRequest) (*Office, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffice not implemented")
}
func (UnimplementedOfficeServiceServer) GetOffice(context.Context, *OfficeRequest) (*Office, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffice not implemented")
}
func (UnimplementedOfficeServiceServer) UpdateOffice(context.Context, *UpdateOfficeRequest) (*Office, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffice not implemented")
}
func (UnimplementedOfficeServiceServer) PatchOffice(context.Context, *PatchOfficeRequest) (*Office, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOffice not implemented")
}
func (UnimplementedOfficeServiceServer) DeleteOffice(context.Context, *DeleteOfficeRequest) (*DeleteOfficeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOffice not implemented")
}
func (UnimplementedOfficeServiceServer) GetOffices(context.Context, *GetOfficesRequest) (*GetOfficesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffices not implemented")
}
func (UnimplementedOfficeServiceServer) mustEmbedUnimplementedOfficeServiceServer() {}
func (UnimplementedOfficeServiceServer) testEmbeddedByValue()                       {}

// UnsafeOfficeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficeServiceServer will
// result in compilation errors.
type UnsafeOfficeServiceServer interface {
	mustEmbedUnimplementedOfficeServiceServer()
}

func RegisterOfficeServiceServer(s grpc.ServiceRegistrar, srv OfficeServiceServer) {
	// If the following call pancis, it indicates UnimplementedOfficeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OfficeService_ServiceDesc, srv)
}

func _OfficeService_CreateOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).CreateOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_CreateOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).CreateOffice(ctx, req.(*CreateOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_GetOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).GetOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_GetOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).GetOffice(ctx, req.(*OfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_UpdateOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).UpdateOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_UpdateOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).UpdateOffice(ctx, req.(*UpdateOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_PatchOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).PatchOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_PatchOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).PatchOffice(ctx, req.(*PatchOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_DeleteOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).DeleteOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_DeleteOffice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).DeleteOffice(ctx, req.(*DeleteOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_GetOffices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).GetOffices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficeService_GetOffices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).GetOffices(ctx, req.(*GetOfficesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficeService_ServiceDesc is the grpc.ServiceDesc for OfficeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OfficeService",
	HandlerType: (*OfficeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOffice",
			Handler:    _OfficeService_CreateOffice_Handler,
		},
		{
			MethodName: "GetOffice",
			Handler:    _OfficeService_GetOffice_Handler,
		},
		{
			MethodName: "UpdateOffice",
			Handler:    _OfficeService_UpdateOffice_Handler,
		},
		{
			MethodName: "PatchOffice",
			Handler:    _OfficeService_PatchOffice_Handler,
		},
		{
			MethodName: "DeleteOffice",
			Handler:    _OfficeService_DeleteOffice_Handler,
		},
		{
			MethodName: "GetOffices",
			Handler:    _OfficeService_GetOffices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule-food-delivery/order/office.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: submodule-food-delivery/order/basket.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BasketService_CreateBasket_FullMethodName             = "/order.BasketService/CreateBasket"
	BasketService_GetBasket_FullMethodName                = "/order.BasketService/GetBasket"
	BasketService_GetBasketByUser_FullMethodName          = "/order.BasketService/GetBasketByUser"
	BasketService_UpdateBasket_FullMethodName             = "/order.BasketService/UpdateBasket"
	BasketService_PatchBasket_FullMethodName              = "/order.BasketService/PatchBasket"
	BasketService_DeleteBasket_FullMethodName             = "/order.BasketService/DeleteBasket"
	BasketService_CreateBasketItem_FullMethodName         = "/order.BasketService/CreateBasketItem"
	BasketService_GetBasketItems_FullMethodName           = "/order.BasketService/GetBasketItems"
	BasketService_DeleteBasketItem_FullMethodName         = "/order.BasketService/DeleteBasketItem"
	BasketService_UpdateBasketItemQuantity_FullMethodName = "/order.BasketService/UpdateBasketItemQuantity"
)

// BasketServiceClient is the client API for BasketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BasketService defines the gRPC service for managing baskets.
type BasketServiceClient interface {
	// Create a new basket.
	CreateBasket(ctx context.Context, in *CreateBasketRequest, opts ...grpc.CallOption) (*Basket, error)
	// Get a basket by its ID.
	GetBasket(ctx context.Context, in *BasketRequest, opts ...grpc.CallOption) (*Basket, error)
	// Get a basket by the user's ID.
	GetBasketByUser(ctx context.Context, in *GetBasketByUserRequest, opts ...grpc.CallOption) (*Basket, error)
	// Update an existing basket.
	UpdateBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*Basket, error)
	// Partially update an existing basket.
	PatchBasket(ctx context.Context, in *PatchBasketRequest, opts ...grpc.CallOption) (*Basket, error)
	// Delete a basket.
	DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketRes, error)
	// Create a new basket item.
	CreateBasketItem(ctx context.Context, in *CreateBasketItemRequest, opts ...grpc.CallOption) (*BasketItem, error)
	// Get all items in a basket.
	GetBasketItems(ctx context.Context, in *GetBasketItemsRequest, opts ...grpc.CallOption) (*GetBasketItemsResponse, error)
	// Delete a basket item.
	DeleteBasketItem(ctx context.Context, in *DeleteBasketItemRequest, opts ...grpc.CallOption) (*DeleteBasketItemRes, error)
	// Update the quantity of a basket item.
	UpdateBasketItemQuantity(ctx context.Context, in *UpdateBasketItemQuantityRequest, opts ...grpc.CallOption) (*BasketItem, error)
}

type basketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketServiceClient(cc grpc.ClientConnInterface) BasketServiceClient {
	return &basketServiceClient{cc}
}

func (c *basketServiceClient) CreateBasket(ctx context.Context, in *CreateBasketRequest, opts ...grpc.CallOption) (*Basket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Basket)
	err := c.cc.Invoke(ctx, BasketService_CreateBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) GetBasket(ctx context.Context, in *BasketRequest, opts ...grpc.CallOption) (*Basket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Basket)
	err := c.cc.Invoke(ctx, BasketService_GetBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) GetBasketByUser(ctx context.Context, in *GetBasketByUserRequest, opts ...grpc.CallOption) (*Basket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Basket)
	err := c.cc.Invoke(ctx, BasketService_GetBasketByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) UpdateBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*Basket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Basket)
	err := c.cc.Invoke(ctx, BasketService_UpdateBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) PatchBasket(ctx context.Context, in *PatchBasketRequest, opts ...grpc.CallOption) (*Basket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Basket)
	err := c.cc.Invoke(ctx, BasketService_PatchBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBasketRes)
	err := c.cc.Invoke(ctx, BasketService_DeleteBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) CreateBasketItem(ctx context.Context, in *CreateBasketItemRequest, opts ...grpc.CallOption) (*BasketItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasketItem)
	err := c.cc.Invoke(ctx, BasketService_CreateBasketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) GetBasketItems(ctx context.Context, in *GetBasketItemsRequest, opts ...grpc.CallOption) (*GetBasketItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasketItemsResponse)
	err := c.cc.Invoke(ctx, BasketService_GetBasketItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) DeleteBasketItem(ctx context.Context, in *DeleteBasketItemRequest, opts ...grpc.CallOption) (*DeleteBasketItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBasketItemRes)
	err := c.cc.Invoke(ctx, BasketService_DeleteBasketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) UpdateBasketItemQuantity(ctx context.Context, in *UpdateBasketItemQuantityRequest, opts ...grpc.CallOption) (*BasketItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasketItem)
	err := c.cc.Invoke(ctx, BasketService_UpdateBasketItemQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServiceServer is the server API for BasketService service.
// All implementations must embed UnimplementedBasketServiceServer
// for forward compatibility.
//
// BasketService defines the gRPC service for managing baskets.
type BasketServiceServer interface {
	// Create a new basket.
	CreateBasket(context.Context, *CreateBasketRequest) (*Basket, error)
	// Get a basket by its ID.
	GetBasket(context.Context, *BasketRequest) (*Basket, error)
	// Get a basket by the user's ID.
	GetBasketByUser(context.Context, *GetBasketByUserRequest) (*Basket, error)
	// Update an existing basket.
	UpdateBasket(context.Context, *UpdateBasketRequest) (*Basket, error)
	// Partially update an existing basket.
	PatchBasket(context.Context, *PatchBasketRequest) (*Basket, error)
	// Delete a basket.
	DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketRes, error)
	// Create a new basket item.
	CreateBasketItem(context.Context, *CreateBasketItemRequest) (*BasketItem, error)
	// Get all items in a basket.
	GetBasketItems(context.Context, *GetBasketItemsRequest) (*GetBasketItemsResponse, error)
	// Delete a basket item.
	DeleteBasketItem(context.Context, *DeleteBasketItemRequest) (*DeleteBasketItemRes, error)
	// Update the quantity of a basket item.
	UpdateBasketItemQuantity(context.Context, *UpdateBasketItemQuantityRequest) (*BasketItem, error)
	mustEmbedUnimplementedBasketServiceServer()
}

// UnimplementedBasketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasketServiceServer struct{}

func (UnimplementedBasketServiceServer) CreateBasket(context.Context, *CreateBasketRequest) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasket not implemented")
}
func (UnimplementedBasketServiceServer) GetBasket(context.Context, *BasketRequest) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedBasketServiceServer) GetBasketByUser(context.Context, *GetBasketByUserRequest) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketByUser not implemented")
}
func (UnimplementedBasketServiceServer) UpdateBasket(context.Context, *UpdateBasketRequest) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasket not implemented")
}
func (UnimplementedBasketServiceServer) PatchBasket(context.Context, *PatchBasketRequest) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBasket not implemented")
}
func (UnimplementedBasketServiceServer) DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasket not implemented")
}
func (UnimplementedBasketServiceServer) CreateBasketItem(context.Context, *CreateBasketItemRequest) (*BasketItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasketItem not implemented")
}
func (UnimplementedBasketServiceServer) GetBasketItems(context.Context, *GetBasketItemsRequest) (*GetBasketItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketItems not implemented")
}
func (UnimplementedBasketServiceServer) DeleteBasketItem(context.Context, *DeleteBasketItemRequest) (*DeleteBasketItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasketItem not implemented")
}
func (UnimplementedBasketServiceServer) UpdateBasketItemQuantity(context.Context, *UpdateBasketItemQuantityRequest) (*BasketItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasketItemQuantity not implemented")
}
func (UnimplementedBasketServiceServer) mustEmbedUnimplementedBasketServiceServer() {}
func (UnimplementedBasketServiceServer) testEmbeddedByValue()                       {}

// UnsafeBasketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServiceServer will
// result in compilation errors.
type UnsafeBasketServiceServer interface {
	mustEmbedUnimplementedBasketServiceServer()
}

func RegisterBasketServiceServer(s grpc.ServiceRegistrar, srv BasketServiceServer) {
	// If the following call pancis, it indicates UnimplementedBasketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasketService_ServiceDesc, srv)
}

func _BasketService_CreateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).CreateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_CreateBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).CreateBasket(ctx, req.(*CreateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_GetBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).GetBasket(ctx, req.(*BasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_GetBasketByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).GetBasketByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_GetBasketByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).GetBasketByUser(ctx, req.(*GetBasketByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_UpdateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).UpdateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_UpdateBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).UpdateBasket(ctx, req.(*UpdateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_PatchBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).PatchBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_PatchBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).PatchBasket(ctx, req.(*PatchBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_DeleteBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).DeleteBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_DeleteBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).DeleteBasket(ctx, req.(*DeleteBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_CreateBasketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).CreateBasketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_CreateBasketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).CreateBasketItem(ctx, req.(*CreateBasketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_GetBasketItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).GetBasketItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_GetBasketItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).GetBasketItems(ctx, req.(*GetBasketItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_DeleteBasketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).DeleteBasketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_DeleteBasketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).DeleteBasketItem(ctx, req.(*DeleteBasketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_UpdateBasketItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketItemQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).UpdateBasketItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_UpdateBasketItemQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).UpdateBasketItemQuantity(ctx, req.(*UpdateBasketItemQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketService_ServiceDesc is the grpc.ServiceDesc for BasketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.BasketService",
	HandlerType: (*BasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBasket",
			Handler:    _BasketService_CreateBasket_Handler,
		},
		{
			MethodName: "GetBasket",
			Handler:    _BasketService_GetBasket_Handler,
		},
		{
			MethodName: "GetBasketByUser",
			Handler:    _BasketService_GetBasketByUser_Handler,
		},
		{
			MethodName: "UpdateBasket",
			Handler:    _BasketService_UpdateBasket_Handler,
		},
		{
			MethodName: "PatchBasket",
			Handler:    _BasketService_PatchBasket_Handler,
		},
		{
			MethodName: "DeleteBasket",
			Handler:    _BasketService_DeleteBasket_Handler,
		},
		{
			MethodName: "CreateBasketItem",
			Handler:    _BasketService_CreateBasketItem_Handler,
		},
		{
			MethodName: "GetBasketItems",
			Handler:    _BasketService_GetBasketItems_Handler,
		},
		{
			MethodName: "DeleteBasketItem",
			Handler:    _BasketService_DeleteBasketItem_Handler,
		},
		{
			MethodName: "UpdateBasketItemQuantity",
			Handler:    _BasketService_UpdateBasketItemQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule-food-delivery/order/basket.proto",
}
